class ViaVerde

  types
    public Car::licensePlate:token
    						carClass:CarClass
    						brand:Brand
    						model:token
    						owner:token
    						viaVerdeDevice:ViaVerdeDevice;
    						
    public CarClass = <a> | <b> | <c> | <d>;
    
    public Brand = <Mercedes> | <Audi> | <KIA> | <Hyundai> | <BMW> | <Mitsubishi>;
    
    public ViaVerdeDevice::id:token
    												creditCard:token
    												record:seq of ViaVerdeRecord;

    public ViaVerdeRecord::record:OneTimeRecord | ParkingRecord | HighwayRecord
    											 cost: real;
    												
    public HighwayRecord::entryKm: real
    											exitKm: real
    											highway: token;
    											
    public ParkingRecord::entryTime: real
    											exitTime: real
    											park: token;
    								
    public OneTimeRecord::oneTime: OneTime
    											time: real;
    
    public OneTime = <GasStation> | <SCUT>;
    
    public Highway::costPerClass: inmap CarClass to real
    								costPerTollbooth: inmap Tollbooth to real
    								name: token;
    															
    public Park::costPerHour: real
    						 name: token;
    						 
    public Direction = <Forward> | <Backward>;
    						     												
    public Tollbooth::km: real
    									direction: Direction;
    
  instance variables
  	public highways: seq of Highway;
  	public parks: seq of Park;
  	public cars: seq of Car;
  	
  operations
	  public goThroughHighway(car: Car, entryKm: real, exitKm: real, direction: Direction, highway: Highway) == (	
	  	dcl costKm: real := (entryKm-exitKm) * highway.costPerClass(car.carClass);
	  	dcl costTollbooths: real := getTollboothsCost(entryKm, exitKm, direction, highway);
	  	dcl cost: real := costKm + costTollbooths;
	  	
	  	dcl viarecord: ViaVerdeRecord := mk_ViaVerdeRecord(mk_HighwayRecord(entryKm, exitKm, highway.name), cost);
	  	car.viaVerdeDevice.record := car.viaVerdeDevice.record ^ viarecord;
	  	
	  	return;
	  );
	  
	  public getTollboothsCost(entryKm: real, exitKm: real, direction: Direction, highway: Highway) costTollbooths: real  == (
	  	dcl cost: real := 0;
   		for all p2 in set dom highway.costPerTollbooth do
      	if p2.km > entryKm and p2.km < exitKm and p2.direction = direction then
      		cost := cost+highway.costPerTollbooth(p2);
      		
     	return cost;	  	
	  );
	  
	  public goThroughPark(car: Car, entryTime: real, exitTime: real, park: Park) == (
	  	dcl cost: real := (entryTime-exitTime mod 60)*park.costPerHour;
	  	
	  	dcl viarecord: ViaVerdeRecord := mk_ViaVerdeRecord(mk_ParkingRecord(entryTime, exitTime, park.name), cost);
	  	car.viaVerdeDevice.record := car.viaVerdeDevice.record ^ viarecord;
	  	
	  	return;
	  );
	  
	  public goThroughOneTime(car: Car, cost: real, oneTime: OneTime, time: real) == (	  	
	  	dcl viarecord: ViaVerdeRecord := mk_ViaVerdeRecord(mk_OneTimeRecord(oneTime, time), cost);
	  	car.viaVerdeDevice.record := car.viaVerdeDevice.record ^ viarecord;
	  	return;
	  );
  
  	public setCreditCard(car: Car, creditCard: token) == (
  		car.viaVerdeDevice.creditCard := creditCard;
  		return;
  	)
  functions
  
end ViaVerde
  