class ViaVerde
  types
  	public String = seq of char;
  	
    public Car::licensePlate:String
    						carClass:CarClass
    						brandModel:BrandModel;
    						
    public CarClass = <a> | <b> | <c> | <d>;
    
    public BrandModel = <Mercedes> * <Benz> | <Audi> * <A4> | <KIA> * <Leo> | <Hyundai> * <Coupe>
    | <BMW> * <X3> | <Mitsubishi> * <Lancer>;
    
    public ViaVerdeDevice::id:String
    												creditCard:String
    												record:seq of ViaVerdeRecord;

    public ViaVerdeRecord::record:OneTimeRecord | ParkingRecord | HighwayRecord
    											 cost: real;
    												
    public HighwayRecord::entryKm: real
    											exitKm: real
    											highway: String;
    											
    public ParkingRecord::entryTime: real
    											exitTime: real
    											park: String;
    								
    public OneTimeRecord = OneTime;
    
    public OneTime::type: <GasStation> | <SCUT>
    								time: real;
    
    public Highway::costPerClass: inmap CarClass to real
    								costPerTollbooth: inmap Tollbooth to real
    								name: String;
    															
    public Park::costPerHour: real
    						 name: String;
    						 
    public Direction = <Forward> | <Backward>;
    						     												
    public Tollbooth::km: real
    									direction: Direction;
    													
    
  instance variables
  	public highways: seq of Highway := [];
  	public parks: seq of Park := [];
  	public registeredCars: inmap Car to ViaVerdeDevice := { |-> };
  	
  	
  operations
	  public ViaVerde: () ==> ViaVerde
			ViaVerde() == 
				return self;
			
	  public goThroughHighway(car: Car, entryKm: real, exitKm: real, direction: Direction, highway: Highway,
	  												device: ViaVerdeDevice) == (
	  	return;
	  );
	  
	  public goThroughPark(car: Car, entryTime: real, exitTime: real, park: Park) == (
	  	return;
	  );
	  
	  public goThroughOneTime(car: Car, cost: real, oneTime: OneTime, time: real) == (
	  	return;
	  );
  
  	public setCreditCard(car: Car, creditCard: String) == 
  		registeredCars(car).creditCard := creditCard
   	pre car in set dom registeredCars;
  	
  	public setDevice(car: Car, device: ViaVerdeDevice) == 
  		registeredCars := registeredCars ++ {car |-> device}
  	pre len device.record = 0;
  	
  functions
  	public retrieveVehicleLocation(licensePlate: String) res: <NotFound> | String*real*real ==
  		<NotFound>;
  		
end ViaVerde
  
/*
Como usar:
Configurar run com "console" nesta classe.

Exemplo comandos:
create vv := new ViaVerde()
print vv.setDevice(mk_Car("12-45-AV", <a>, mk_(<Audi>, <A4>)), mk_ViaVerdeDevice("1", "1234687854", []))
*/