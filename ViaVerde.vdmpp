class ViaVerde

  types
  	public String = seq1 of char;
  	  	
    public Car::licensePlate:String
    						carClass:CarClass
    						brand:Brand
    						model:String
    						owner:String;
    						
    public CarClass = <a> | <b> | <c> | <d>;
    
    public Brand = <Mercedes> | <Audi> | <KIA> | <Hyundai> | <BMW> | <Mitsubishi>;
    
    public ViaVerdeDevice::id:String
    												creditCard:String
    												records:seq of ViaVerdeRecord;

    public ViaVerdeRecord::record:OneTimeRecord | ParkingRecord | HighwayRecord
    											 cost: real;
    												
    public HighwayRecord::entryKm: real
    											exitKm: real
    											direction: Direction
    											highway: String;
    											
    public ParkingRecord::entryTime: real
    											exitTime: real
    											park: String;
    								
    public OneTimeRecord::oneTime: OneTime
    											time: real;
    
    public OneTime = <GasStation> | <SCUT>;
    
    public Highway::costPerClass: inmap CarClass to real
    								costPerTollbooth: inmap Tollbooth to real
    								name: String;
    						 
    public Direction = <Forward> | <Backward>;
    						     												
    public Tollbooth::km: real
    									direction: Direction;
    
  instance variables
  	public highways: inmap String to Highway := { |-> };
  	--Park name -> Cost per hour
  	public parks: inmap String to real := { |-> };   					
  	public registeredCars: inmap Car to ViaVerdeDevice := { |-> };
  	public unRegisteredCarsRecords: map Car to ViaVerdeRecord := { |-> };
  	
  	--All cost, distance and time units >= 0
  	--Entry time/KM < Exit time/KM
  	inv forall highway in set rng highways &
  				forall cpc in set rng highway.costPerClass,
  				cpt in set rng highway.costPerTollbooth & cpc >= 0 and cpt >= 0;
  				
  	inv forall costPerHour in set rng parks & costPerHour >= 0;
  	  	
  	inv forall device in set rng registeredCars &
  				forall vv_record in set elems device.records &
  						validRecordCost(vv_record) and
  						validRecordKm(vv_record) and
  						consistentRecordKm(vv_record, rng highways);
  								
  	inv forall vv_record in set rng unRegisteredCarsRecords &
					validRecordCost(vv_record) and
					validRecordKm(vv_record) and
					consistentRecordKm(vv_record, rng highways);
  				
    --A car is either registered or unregistered
    inv dom registeredCars inter dom unRegisteredCarsRecords = {};
    
  operations
	  public goThroughHighway(car: Car, entryKm: real, exitKm: real, direction: Direction, highway: Highway) == (	
	  	dcl costKm: real := (entryKm-exitKm) * highway.costPerClass(car.carClass);
	  	dcl cost: real := costKm;
	  	
	  	dcl viarecord: ViaVerdeRecord := mk_ViaVerdeRecord(mk_HighwayRecord(entryKm, exitKm, direction, highway.name), cost);
	  	registeredCars(car).records := registeredCars(car).records ^ [viarecord];
	  	
	  	return;
	  )
	  pre car in set dom registeredCars and entryKm < exitKm;	  
	  
	  
	  public goThroughPark(car: Car, entryTime: real, exitTime: real, park: String) == (
	  	dcl cost: real := (entryTime-exitTime mod 60)*parks(park);
	  	
	  	dcl viarecord: ViaVerdeRecord := mk_ViaVerdeRecord(mk_ParkingRecord(entryTime, exitTime, park), cost);
	  	registeredCars(car).records := registeredCars(car).records ^ [viarecord];
	  	
	  	return;
	  )
	  pre car in set dom registeredCars and entryTime < exitTime;
	  
	  public goThroughOneTime(car: Car, cost: real, oneTime: OneTime, time: real) == (	  	
	  	dcl viarecord: ViaVerdeRecord := mk_ViaVerdeRecord(mk_OneTimeRecord(oneTime, time), cost);
	  	registeredCars(car).records := registeredCars(car).records ^  [viarecord];
	  	return;
	  )
	  pre car in set dom registeredCars;
  
  	public setCreditCard(car: Car, creditCard: String) == (
  		registeredCars(car).creditCard := creditCard;
  		return;
  	)
  functions  
  	public retrieveVehicleLocation(licensePlate: String) res: <NotFound> | String*real*real ==
  		<NotFound>;
  	
  	--Positive costs	
  	private validRecordCost(vv_record: ViaVerdeRecord) res: bool ==
  			vv_record.cost >= 0 and
  						( is_OneTimeRecord(vv_record.record) =>
  								vv_record.record.cost >= 0 );
  	
  	--Positive distances, entry before exit							
  	private validRecordKm(vv_record: ViaVerdeRecord) res: bool ==
				( is_HighwayRecord(vv_record.record) =>
	  					vv_record.record.entryKm >= 0 and vv_record.record.exitKm >= 0 and
	  					vv_record.record.entryKm < vv_record.record.exitKm ) and
	  		( is_ParkingRecord(vv_record.record) =>
	  					vv_record.record.entryTime >= 0 and vv_record.record.exitTime >= 0 and
	  					vv_record.record.entryTime < vv_record.record.exitTime );
	  
	  --Entry/exit km in records match existing tollbooths		
	  private consistentRecordKm(vv_record: ViaVerdeRecord, highways: set of Highway) res: bool ==
	  		is_HighwayRecord(vv_record.record) =>
	  				exists highway in set highways &
	  						( exists tollbooth in set dom highway.costPerTollbooth &
	  								vv_record.record.exitKm = tollbooth.km and
	  								vv_record.record.direction = tollbooth.direction ) and
	  						( exists tollbooth in set dom highway.costPerTollbooth &
	  								vv_record.record.entryKm = tollbooth.km and
	  								vv_record.record.direction = tollbooth.direction )
end ViaVerde
  