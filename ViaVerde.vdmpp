class ViaVerde

  types
  	public String = seq1 of char;
  	  	
    public Car::licensePlate:String
    						brandModel:BrandModel;
    						
    public CarClass = <a> | <b> | <c> | <d>;
    						
    -- Brand * Model * Class
    public BrandModel = <Mercedes> * <Benz> * <a> | <Audi> * <A4> * <a> | <KIA> * <Leo> * <a> | <Hyundai> * <Coupe> * <a>
    | <BMW> * <X3> * <a> | <Mitsubishi> * <Lancer> * <a>;
    
    public ViaVerdeDevice::id:String
    												creditCard:String
    												records:seq of ViaVerdeRecord;

    public ViaVerdeRecord::record:OneTimeRecord | ParkingRecord | HighwayRecord
    											 cost: real;
    												
    public HighwayRecord::entryKm: real
    											exitKm: real
    											entryTime: real
    											exitTime: real
    											direction: Direction
    											highway: String;
    											
    public ParkingRecord::entryTime: real
    											exitTime: real
    											park: String;
    								
    public OneTimeRecord::oneTime: OneTime
    											time: real;
    
    public OneTime = <GasStation> | <SCUT>;
    
    public Highway::costPerClass: inmap CarClass to real
    								costPerTollbooth: inmap Tollbooth to real
    								name: String;
    						 
    public Direction = <Forward> | <Backward>;
    						     												
    public Tollbooth::km: real
    									direction: Direction;
    
  instance variables
  	public highways: inmap String to Highway := { |-> };
  	--Park name -> Cost per hour
  	public parks: inmap String to real := { |-> };   					
  	public registeredCars: inmap Car to ViaVerdeDevice := { |-> };
  	public unRegisteredCarsRecords: map Car to seq of ViaVerdeRecord := { |-> };
  	
  	--All cost, distance and time units >= 0
  	--Entry time/KM < Exit time/KM
  	
  	inv forall highway in set rng highways &
			forall cpc in set rng highway.costPerClass &
				cpc >= 0;
			inv forall highway in set rng highways &
			forall cpt in set rng highway.costPerTollbooth &
			cpt >= 0;
  						
  			
    --A car is either registered or unregistered
    inv dom registeredCars inter dom unRegisteredCarsRecords = {};
    
    --Unique license plate in the whole system
    inv not exists a, b in set dom unRegisteredCarsRecords union dom registeredCars &
    			a.licensePlate = b.licensePlate and 
    			(a.brandModel <> b.brandModel or
    			 (a in set dom registeredCars and b in set dom unRegisteredCarsRecords) or
    			 (a in set dom unRegisteredCarsRecords and b in set dom registeredCars));
    
    --An highway must have prices set for every class
    inv not exists h in set rng highways & dom h.costPerClass	inter {<a>, <b>, <c>, <d>} <> {<a>, <b>, <c>, <d>};
        
    --A car can't be in more then a place at a time (being it a park, an highway, or a mix)		
  operations
    public ViaVerde: () ==> ViaVerde
			ViaVerde() == 
				return self;
				
	  public registerCar(car: Car, creditCard: String, id: String) == (
	  	if(car in set dom unRegisteredCarsRecords) then (
		  	registeredCars := registeredCars munion { car |-> mk_ViaVerdeDevice(id, creditCard, unRegisteredCarsRecords(car))};
		  	unRegisteredCarsRecords := {car} <-: unRegisteredCarsRecords 
		 ) else 		   
	  		registeredCars := registeredCars munion { car |-> mk_ViaVerdeDevice(id, creditCard, [])};
	  );
	  
	  public unregisterCar(car: Car) == (
  		unRegisteredCarsRecords := unRegisteredCarsRecords munion { car |-> registeredCars(car).records};
	  	registeredCars := {car} <-: registeredCars;
	  ) pre car in set dom registeredCars;
	  
	  public goThroughHighway(car: Car, km: real, time: real, direction: Direction, entrance:bool, highway: Highway) == (	
	  	dcl cost: real := 0;
	  	if(not entrance) then (
	  		if(car in set dom registeredCars) then (
		  		dcl kmCost: real := abs registeredCars(car).records(len registeredCars(car).records).record.entryKm-km;
	  			cost :=  kmCost * highway.costPerClass(car.brandModel.#3);
	  			registeredCars(car).records(len registeredCars(car).records).cost := cost;
	  			registeredCars(car).records(len registeredCars(car).records).record.exitKm := km;
	  			registeredCars(car).records(len registeredCars(car).records).record.exitTime := time
	  		) else (
	  			dcl kmCost: real := abs unRegisteredCarsRecords(car)(len unRegisteredCarsRecords(car)).record.entryKm-km;
	  			cost :=  kmCost * highway.costPerClass(car.brandModel.#3);
	  			unRegisteredCarsRecords(car)(len registeredCars(car).records).cost := cost;
	  			unRegisteredCarsRecords(car)(len registeredCars(car).records).record.exitKm := km;
	  			unRegisteredCarsRecords(car)(len registeredCars(car).records).record.exitTime := time
	  		))
	  	else 	  		
	  		addToRecords(car, mk_ViaVerdeRecord(mk_HighwayRecord(km, 0, time, 0, direction, highway.name), cost))
	  )
	  
	  pre car in set (dom registeredCars) union (dom unRegisteredCarsRecords);	  
	  
	  public goThroughPark(car: Car, time: real, entrance: bool, park: String) == (
	  	dcl cost: real := 0;
	  	if(not entrance) then (
	  		if(car in set dom registeredCars) then (
			  	cost := (abs (registeredCars(car).records(len registeredCars(car).records).record.entryTime-time)) *parks(park);
	  			registeredCars(car).records(len registeredCars(car).records).cost := cost;
	  			registeredCars(car).records(len registeredCars(car).records).record.exitTime := time
	  		) else
			  	cost := (abs (unRegisteredCarsRecords(car)(len registeredCars(car).records).record.entryTime-time)) *parks(park);	  		
	  			unRegisteredCarsRecords(car)(len registeredCars(car).records).cost := cost;
	  			unRegisteredCarsRecords(car)(len registeredCars(car).records).record.exitTime := time
	  		)
	  	else 	  		
	  		addToRecords(car, mk_ViaVerdeRecord(mk_ParkingRecord(time, 0, park), cost));	  	
	  )
	  pre car in set (dom registeredCars) union (dom unRegisteredCarsRecords);
	  
	  public goThroughOneTime(car: Car, cost: real, oneTime: OneTime, time: real) == (	  	
	  	addToRecords(car, mk_ViaVerdeRecord(mk_OneTimeRecord(oneTime, time), cost));
	  )
	  pre car in set (dom registeredCars) union (dom unRegisteredCarsRecords);
  
  	public setCreditCard(car: Car, creditCard: String) == (
  		registeredCars(car).creditCard := creditCard;
  	)
  	pre car in set dom registeredCars;
  	
  	public addToRecords(car: Car, viaVerdeRecord: ViaVerdeRecord) == (
  		if(car in set dom registeredCars) then
	  		registeredCars(car).records := registeredCars(car).records ^ [viaVerdeRecord]
	  	else 
	  		unRegisteredCarsRecords(car) := unRegisteredCarsRecords(car) ^ [viaVerdeRecord];	  	
  	);  	
  	
  		
  	public retrieveVehicleLocation(licensePlate: String) res: <NotFound> | String ==
			let vv_records = getRecordsFromLicensePlate(licensePlate) in
				if exists vv_record in set elems vv_records & is_ParkingRecord(vv_record.record) and vv_record.record.exitTime = 0
				then return (iota vv_record in set elems vv_records & is_ParkingRecord(vv_record.record) and vv_record.record.exitTime = 0).record.park 
				elseif exists vv_record in set elems vv_records & is_HighwayRecord(vv_record.record) and vv_record.record.exitKm = 0
				then return (iota vv_record in set elems vv_records & is_HighwayRecord(vv_record.record) and vv_record.record.exitKm = 0).record.highway
				else return <NotFound>
		pre exists car in set dom unRegisteredCarsRecords union dom registeredCars &
						car.licensePlate = licensePlate;	
				
		public getRecordsFromLicensePlate(licensePlate: String) res: seq of ViaVerdeRecord == (
			dcl car: Car | <NotFound> := getCarFromLicensePlate(licensePlate);
			dcl records: seq of ViaVerdeRecord;
						
			if car = <NotFound> then return [];
						
			if car in set dom registeredCars
			then records := registeredCars(car).records
			else records := unRegisteredCarsRecords(car);
			
			return records;		
		)
		pre exists car in set dom unRegisteredCarsRecords union dom registeredCars &
						car.licensePlate = licensePlate;
		
		public getCarFromLicensePlate(licensePlate: String) res: Car == (
			return iota car in set dom unRegisteredCarsRecords union dom registeredCars &
						car.licensePlate = licensePlate;
		)
		pre exists car in set dom unRegisteredCarsRecords union dom registeredCars &
						car.licensePlate = licensePlate;
						
  functions  
		public remove[@T](e: @T, s: seq of @T) res: seq of @T ==
    	[s(i) | i in set inds s & s(i) <> e];
    	
    public removeMap[@T](e: @T, s: map @T to seq of ViaVerdeRecord) res: map @T to seq of ViaVerdeRecord ==
    	{ i |-> s(i) | i in set dom s & s(i) <> e};
  	
  	--Positive distances/times, entry before exit							
  	private validRecordKm(vv_record: ViaVerdeRecord) res: bool ==
  			is_OneTimeRecord(vv_record.record) => vv_record.record.time >= 0 and
				( is_HighwayRecord(vv_record.record) =>
	  					vv_record.record.entryKm >= 0 and vv_record.record.exitKm >= 0 and
	  					greaterOrZero(vv_record.record.entryKm, vv_record.record.exitKm) ) and
	  		( is_ParkingRecord(vv_record.record) =>
	  					vv_record.record.entryTime >= 0 and vv_record.record.exitTime >= 0 and
	  					greaterOrZero(vv_record.record.entryTime, vv_record.record.exitTime) );
	  
	  --Entry/exit km in records match existing tollbooths		
	  private consistentRecordKm(vv_record: ViaVerdeRecord, highways: set of Highway) res: bool ==
	  		is_HighwayRecord(vv_record.record) =>
	  				exists highway in set highways &
	  						highway.name = vv_record.record.highway and
	  						( exists tollbooth in set dom highway.costPerTollbooth &
	  								vv_record.record.entryKm = tollbooth.km and
	  								vv_record.record.direction = tollbooth.direction ) and
	  								
	  						--If client has already exited
	  						vv_record.record.exitKm > 0 =>
			  						( exists tollbooth in set dom highway.costPerTollbooth &
			  								vv_record.record.exitKm = tollbooth.km and
			  								vv_record.record.direction = tollbooth.direction );
	  
	  --Records reference existing infrastructures
	  consistentNames(vv_record: ViaVerdeRecord, highways: set of Highway, parks: set of String) res: bool ==
	  		( is_HighwayRecord(vv_record.record) =>
	  					exists highway in set highways & highway.name = vv_record.record.highway ) and
	  		( is_ParkingRecord(vv_record.record) =>
	  					exists park in set parks & park = vv_record.record.park );    
	  								
	  private greaterOrZero(first: real, second: real) res: bool ==
	  		second >= first or second = 0;
end ViaVerde

/*
Como usar:
Configurar run com "console" nesta classe.

Exemplo comandos:
create vv := new ViaVerde()
print vv.registerCar(mk_Car("12-45-AV", mk_(<Audi>, <A4>, <a>)), "1234687854", "1")
print vv.goThroughHighway(mk_Car("12-45-AV", mk_(<Audi>, <A4>, <a>)), 11, 1133, <Forward>, true, mk_Highway({<a> |-> 10, <b> |-> 11, <c> |-> 12, <d> |-> 13}, {mk_Tollbooth(0, <Forward>) |-> 10, mk_Tollbooth(10, <Forward>) |-> 12}, "jo"))
print vv.goThroughHighway(mk_Car("12-45-AV", mk_(<Audi>, <A4>, <a>)), 15, 1500, <Forward>, false, mk_Highway({<a> |-> 10, <b> |-> 11, <c> |-> 12, <d> |-> 13}, {mk_Tollbooth(0, <Forward>) |-> 10, mk_Tollbooth(10, <Forward>) |-> 12}, "jo"))
print vv.goThroughPark(mk_Car("12-45-AV", mk_(<Audi>, <A4>, <a>)), 11, 1133, <Forward>, true, mk_Highway({<a> |-> 10, <b> |-> 11, <c> |-> 12, <d> |-> 13}, {mk_Tollbooth(0, <Forward>) |-> 10, mk_Tollbooth(10, <Forward>) |-> 12}, "jo"))
print vv.goThroughPark(mk_Car("12-45-AV", mk_(<Audi>, <A4>, <a>)), 15, 1500, <Forward>, false, mk_Highway({<a> |-> 10, <b> |-> 11, <c> |-> 12, <d> |-> 13}, {mk_Tollbooth(0, <Forward>) |-> 10, mk_Tollbooth(10, <Forward>) |-> 12}, "jo"))
print vv.goThroughHighway(mk_Car("12-45-AV", mk_(<Audi>, <A4>, <a>)), 11, 1133, <Forward>, true, mk_Highway({<a> |-> 10, <b> |-> 11, <c> |-> 12, <d> |-> 13}, {mk_Tollbooth(0, <Forward>) |-> 10, mk_Tollbooth(10, <Forward>) |-> 12}, "jo"))
print vv.goThroughHighway(mk_Car("12-45-AV", mk_(<Audi>, <A4>, <a>)), 15, 1500, <Forward>, false, mk_Highway({<a> |-> 10, <b> |-> 11, <c> |-> 12, <d> |-> 13}, {mk_Tollbooth(0, <Forward>) |-> 10, mk_Tollbooth(10, <Forward>) |-> 12}, "jo"))
print vv.registeredCars(mk_Car("12-45-AV", mk_(<Audi>, <A4>, <a>))).records
*/
  