class TestViaVerde is subclass of MyTestCase
	
operations
	-- Setup a default environment for the ViaVerde system
	public Setup : () ==> ViaVerde
		Setup () == (
			dcl vv : ViaVerde := new ViaVerde();
			||(
				vv.highways := {"A1" |-> 
					mk_ViaVerde`Highway({<a> |-> 0.1, <b> |-> 0.2, <c> |-> 0.3, <d> |-> 0.4},
					{mk_ViaVerde`Tollbooth(5,<Forward>) |-> 0.4, mk_ViaVerde`Tollbooth(105,<Forward>) |-> 2.5},
						"A1")},
				vv.parks := {"Parque Gaia" |-> 0.5});			
			return vv;
		);
		
	-- Tests with valid inputs	
		
	public testRegisterCar: () ==> ()
	  testRegisterCar() == (
	  	let vv = Setup(),
	  		  car = mk_ViaVerde`Car("12345", mk_(<Mercedes>,<Benz>,<a>)),
	  		  vvDevice = mk_ViaVerde`ViaVerdeDevice("0","101010",[]),
	  		  registeredCars = {car |-> vvDevice}
	  	in (
	  		vv.registerCar(car,"101010","0");
	  	  assertEqual(vv.registeredCars,  registeredCars);
	  	)
	  );
	  
	public testUnregisterCar: () ==> ()
	  testUnregisterCar() == (
	  	let vv = Setup(),
	  		  car = mk_ViaVerde`Car("12345", mk_(<Mercedes>,<Benz>,<a>))	  
	  	in (
	  		vv.registerCar(car,"101010","0"); -- tested previously
	  		vv.unregisterCar(car); 
	  	  assertEqual(vv.registeredCars,  {|->});
	  	  assertEqual(vv.unRegisteredCarsRecords,  {car |-> []});
	  	)
	  );
	  
	public testGoThroughHighway: () ==> ()
	  testGoThroughHighway() == (
	  	let vv = Setup(),
	  		  car = mk_ViaVerde`Car("12345", mk_(<Mercedes>,<Benz>,<a>)),
	  		  entrykm = 2,
	  		  exitkm = 200,
	  		  entryTime = 1500,
	  		  exitTime = 1630,
	  		  direction = <Forward>,
	  		  entrance = true,
	  		  highway = vv.highways("A1"),
	  		  cost = 19.8
	  	in (
	  		vv.registerCar(car,"101010","0"); -- tested previously
	  		vv.goThroughHighway(car,entrykm,entryTime,direction,entrance,highway);
	  		vv.goThroughHighway(car,exitkm,exitTime,direction,not entrance,highway);
	  		assertEqual(vv.registeredCars(car).records(len vv.registeredCars(car).records).cost, cost);
	  	)
	  );
	  
	public testGoThroughPark: () ==> ()
	  testGoThroughPark() == (
	  	let vv = Setup(),
	  		  car = mk_ViaVerde`Car("12345", mk_(<Mercedes>,<Benz>,<a>)),
	  		  entryTime = 1933,
	  		  exitTime = 2000,
	  		  entrance = true,
	  		  cost = (exitTime - entryTime) * vv.parks("Parque Gaia")
	  	in (
	  		vv.registerCar(car,"101010","0"); -- tested previously
	  		vv.goThroughPark(car,entryTime,entrance,"Parque Gaia");
	  		vv.goThroughPark(car,exitTime,not entrance,"Parque Gaia");
	  		assertEqual(vv.registeredCars(car).records(len vv.registeredCars(car).records).cost, cost);
	  	)
	  );
	  
	  public testGoThroughOneTime: () ==> ()
	  testGoThroughOneTime() == (
	  	let vv = Setup(),
	  		  car = mk_ViaVerde`Car("12345", mk_(<Mercedes>,<Benz>,<a>)),
	  		  time = 1933,
					type = <SCUT>,
	  		  cost = 2.5,
	  		  record = mk_ViaVerde`OneTimeRecord(type, time) 
	  	in (
	  		vv.registerCar(car,"101010","0"); -- tested previously
	  		vv.goThroughOneTime(car,cost,type,time);
	  		assertEqual(vv.registeredCars(car).records(len vv.registeredCars(car).records).record, record);
	  	)
	  );

	-- Entry point that runs all tests with valid inputs
  public testAll: () ==> ()
  testAll() == (
  	testRegisterCar();
  	testUnregisterCar();
  	testGoThroughHighway();
  	testGoThroughPark();
  	testGoThroughOneTime();
  );
  
  -- Tests with invalid inputs

end TestViaVerde


--test registerCar check

--test unregisterCar pending

--test goThroughHighway 

--test goThroughPark

--test goThroughOneTime

--test setCreditCard

--test addToRecords